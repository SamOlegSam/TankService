//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TankService.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ChemLabEntities : DbContext
    {
        public ChemLabEntities()
            : base("name=ChemLabEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActionLog> ActionLog { get; set; }
        public virtual DbSet<ActionLog2> ActionLog2 { get; set; }
        public virtual DbSet<ActionLogPassport> ActionLogPassport { get; set; }
        public virtual DbSet<AuthActivity> AuthActivity { get; set; }
        public virtual DbSet<AuthActivity2> AuthActivity2 { get; set; }
        public virtual DbSet<AuthHistory> AuthHistory { get; set; }
        public virtual DbSet<AuthHistory2> AuthHistory2 { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Directions> Directions { get; set; }
        public virtual DbSet<Filial> Filial { get; set; }
        public virtual DbSet<ManualData> ManualData { get; set; }
        public virtual DbSet<ManualData_old> ManualData_old { get; set; }
        public virtual DbSet<ManualData_trash> ManualData_trash { get; set; }
        public virtual DbSet<ManualData_updated> ManualData_updated { get; set; }
        public virtual DbSet<Passport> Passport { get; set; }
        public virtual DbSet<PassportTnpa> PassportTnpa { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<Person2> Person2 { get; set; }
        public virtual DbSet<Protocol> Protocol { get; set; }
        public virtual DbSet<Protocol_15062021> Protocol_15062021 { get; set; }
        public virtual DbSet<Protocol_old> Protocol_old { get; set; }
        public virtual DbSet<ProtocolResult> ProtocolResult { get; set; }
        public virtual DbSet<ProtocolRoom> ProtocolRoom { get; set; }
        public virtual DbSet<ProtocolRoom_old> ProtocolRoom_old { get; set; }
        public virtual DbSet<ProtocolTest> ProtocolTest { get; set; }
        public virtual DbSet<ProtocolTestTnpa> ProtocolTestTnpa { get; set; }
        public virtual DbSet<ProtocolTool> ProtocolTool { get; set; }
        public virtual DbSet<ProtocolTool_old> ProtocolTool_old { get; set; }
        public virtual DbSet<Recipient> Recipient { get; set; }
        public virtual DbSet<RoleFilial> RoleFilial { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Room> Room { get; set; }
        public virtual DbSet<Room_old> Room_old { get; set; }
        public virtual DbSet<SampleLocation> SampleLocation { get; set; }
        public virtual DbSet<SampleSource> SampleSource { get; set; }
        public virtual DbSet<SampleType> SampleType { get; set; }
        public virtual DbSet<serviceMessage> serviceMessage { get; set; }
        public virtual DbSet<Signer> Signer { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TestDensTnpa> TestDensTnpa { get; set; }
        public virtual DbSet<TestObject> TestObject { get; set; }
        public virtual DbSet<TestTnpa> TestTnpa { get; set; }
        public virtual DbSet<TestTnpaNew> TestTnpaNew { get; set; }
        public virtual DbSet<TestType> TestType { get; set; }
        public virtual DbSet<Tool> Tool { get; set; }
        public virtual DbSet<ToolType> ToolType { get; set; }
        public virtual DbSet<ToolType_old> ToolType_old { get; set; }
        public virtual DbSet<ToolType_old2> ToolType_old2 { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserRoles> UserRoles { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Users2old> Users2old { get; set; }
        public virtual DbSet<Protocol_trash> Protocol_trash { get; set; }
        public virtual DbSet<Protocol_updated> Protocol_updated { get; set; }
        public virtual DbSet<ProtocolResult_trash> ProtocolResult_trash { get; set; }
        public virtual DbSet<ProtocolResult_updated> ProtocolResult_updated { get; set; }
        public virtual DbSet<Tool_old> Tool_old { get; set; }
        public virtual DbSet<LastMechanResultMoz> LastMechanResultMoz { get; set; }
        public virtual DbSet<LastTanksResultMoz> LastTanksResultMoz { get; set; }
        public virtual DbSet<LastTanksResultPol> LastTanksResultPol { get; set; }
        public virtual DbSet<ViewResult> ViewResult { get; set; }
        public virtual DbSet<ViewResultMsi> ViewResultMsi { get; set; }
        public virtual DbSet<ViewResultTank> ViewResultTank { get; set; }
    
        public virtual ObjectResult<DayParkMechanMoz_Result> DayParkMechanMoz(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DayParkMechanMoz_Result>("DayParkMechanMoz", dateParameter);
        }
    
        public virtual ObjectResult<DayParkMechanPol_Result> DayParkMechanPol(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DayParkMechanPol_Result>("DayParkMechanPol", dateParameter);
        }
    
        public virtual ObjectResult<DayParkResultMoz_Result> DayParkResultMoz(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DayParkResultMoz_Result>("DayParkResultMoz", dateParameter);
        }
    
        public virtual ObjectResult<DayParkResultPol_Result> DayParkResultPol(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DayParkResultPol_Result>("DayParkResultPol", dateParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    }
}
